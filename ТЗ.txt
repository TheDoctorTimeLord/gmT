ИДЕЯ:
-> GUI обновляет состояние игры через вызовы метода в GameState
  |-> GameState умеет корректно работать с менеджерами, обеспечивая корректность состояния
  |-> GameState последовательно собирает намерения Animate и, в случаи их корректности вызывает у Animate метод поддтверждения намерения.
	  В случаи не корркетности - отклоняет намерение
  |-> GameState также обновляет состояние всех внутриигровых таймеров
-> MapManager управляет данными о карте, в частности, информацией о шумах, данными о самой карте и т.д.
-> TimerManager управляет внутриигровыми таймерами: добавляет новые, в случае истечения старых - совершает действия, предписанные интерфейсом
-> AnimatesManager управляет созданными существами.
  |-> AnimatesManager добавляет новые объекты, которые будут созданы после вызова обновления существ
  |-> AnimatesManager удаляет существующие динамические объекты.

ИНТЕРФЕЙСЫ:
:: ITimer :: реализуют все объекты, которые имеют временный внутриигровой характер (шумы, временные эффекты и т.д.)
:: ICreature :: реализуют все объекты, имеющие тип Существа

РОДИТЕЛЬСКИЕ КЛАССЫ:
:: AnimateObject :: Класс, определяющий базовые поля Существ. Реализует ICreature
:: InanimateObject :: Класс, определяющий базовые поля для Неодушивлённых существ

НУЖНО:
  ----ДАННЫЕ КАРТЫ----
- Получение информации о начальном состоянии игры из файла
-+ Создание карты с наполнением игровыми элементами

  ----ОБНОВЛЕНИЕ ДАННЫХ О МИРЕ ДЛЯ СУЩЕСТВ---- (ФЁДОР)
+ Добавление для персонажей порога слышимости, дельты слышимости, дальности видмости
+ Персонаж, каждое состояние обновляет свои данные о мире, запрашивая набор Cell(позиция, дальность видимости) и набор 
  NoiseSource(позиция, порог слышимости, дельта слышимости) у MapManager

  ----НЕЖИВЫЕ ОБЪЕКТЫ----
+ Создание, определение полей
- Добавление событий взаимодействия, на которые подписываются специальные методы обновления других неживых объектов.
  Образуется система отклика на взаимодействие.

  ----ВСЕ ОБЪЕКТЫ----
-+ Добавление метода 
      void Interative(ICreature)
  который описывет действия объекта, при попытки взаимодейсвтия с ним некоторого существа

  ----ПЕРЕИМЕНОВАНИЕ----
- Переименовать методы ActionTaken и ActionRejected у ICreature

-----------------СОВМЕСТНАЯ РАБОТА-----------------
ФЁДОР:

АНАСТАСИЯ:
  

-----------------РАЗДЕЛЕНИЕ РАБОТЫ-----------------
ФЁДОР:
  AnimatedObjects/MobileObject.cs
  AnimatedObjects/ICreature.cs
  AnimatedObjects/Player.cs
  Managers/AnimatesManager.cs
  Managers/TimersManager.cs
  GameState.cs
  ITimer.cs
  Query.cs

АНАСТАСИЯ:
	Managers/MapManager.cs
	MapSourse/Cell.cs
	MapSourse/Map.cs
	MapSourse/Noise.cs
	MapSourse/NoiseController.cs
	MapSourse/NoiseSource.cs
	MapSourse/NoiseType.cs
	InanimateObjects/ImmobileObject.cs
	InanimateObjects/IDecor.cs